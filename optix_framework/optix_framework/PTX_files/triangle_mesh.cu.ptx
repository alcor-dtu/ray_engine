//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-19805474
// Cuda compilation tools, release 7.5, V7.5.16
// Based on LLVM 3.4svn
//

.version 4.3
.target sm_20
.address_size 64

	// .globl	_Z14mesh_intersecti
.global .align 1 .b8 vertex_buffer[1];
.global .align 1 .b8 normal_buffer[1];
.global .align 1 .b8 texcoord_buffer[1];
.global .align 1 .b8 vindex_buffer[1];
.global .align 1 .b8 nindex_buffer[1];
.global .align 1 .b8 tindex_buffer[1];
.global .align 1 .b8 material_buffer[1];
.global .align 8 .b8 texcoord[12];
.global .align 8 .b8 geometric_normal[12];
.global .align 8 .b8 shading_normal[12];
.global .align 4 .b8 ray[36];
.global .align 8 .u64 _ZN21rti_internal_register20reg_bitness_detectorE;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail0E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail1E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail2E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail3E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail4E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail5E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail6E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail7E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail8E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail9E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail0E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail1E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail2E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail3E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail4E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail5E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail6E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail7E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail8E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail9E;
.global .align 4 .u32 _ZN21rti_internal_register14reg_rayIndex_xE;
.global .align 4 .u32 _ZN21rti_internal_register14reg_rayIndex_yE;
.global .align 4 .u32 _ZN21rti_internal_register14reg_rayIndex_zE;
.global .align 4 .b8 _ZN21rti_internal_typeinfo8texcoordE[8] = {82, 97, 121, 0, 12, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo16geometric_normalE[8] = {82, 97, 121, 0, 12, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo14shading_normalE[8] = {82, 97, 121, 0, 12, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo3rayE[8] = {82, 97, 121, 0, 36, 0, 0, 0};
.global .align 1 .b8 _ZN21rti_internal_typename8texcoordE[7] = {102, 108, 111, 97, 116, 51, 0};
.global .align 1 .b8 _ZN21rti_internal_typename16geometric_normalE[7] = {102, 108, 111, 97, 116, 51, 0};
.global .align 1 .b8 _ZN21rti_internal_typename14shading_normalE[7] = {102, 108, 111, 97, 116, 51, 0};
.global .align 1 .b8 _ZN21rti_internal_typename3rayE[11] = {111, 112, 116, 105, 120, 58, 58, 82, 97, 121, 0};
.global .align 4 .u32 _ZN21rti_internal_typeenum8texcoordE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum16geometric_normalE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum14shading_normalE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum3rayE = 4919;
.global .align 1 .b8 _ZN21rti_internal_semantic8texcoordE[19] = {97, 116, 116, 114, 105, 98, 117, 116, 101, 32, 116, 101, 120, 99, 111, 111, 114, 100, 0};
.global .align 1 .b8 _ZN21rti_internal_semantic16geometric_normalE[27] = {97, 116, 116, 114, 105, 98, 117, 116, 101, 32, 103, 101, 111, 109, 101, 116, 114, 105, 99, 95, 110, 111, 114, 109, 97, 108, 0};
.global .align 1 .b8 _ZN21rti_internal_semantic14shading_normalE[25] = {97, 116, 116, 114, 105, 98, 117, 116, 101, 32, 115, 104, 97, 100, 105, 110, 103, 95, 110, 111, 114, 109, 97, 108, 0};
.global .align 1 .b8 _ZN21rti_internal_semantic3rayE[13] = {114, 116, 67, 117, 114, 114, 101, 110, 116, 82, 97, 121, 0};
.global .align 1 .b8 _ZN23rti_internal_annotation8texcoordE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation16geometric_normalE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation14shading_normalE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation3rayE[1];

.visible .entry _Z14mesh_intersecti(
	.param .u32 _Z14mesh_intersecti_param_0
)
{
	.reg .pred 	%p<27>;
	.reg .f32 	%f<150>;
	.reg .b32 	%r<45>;
	.reg .b64 	%rd<98>;


	ld.param.u32 	%r7, [_Z14mesh_intersecti_param_0];
	cvt.s64.s32	%rd3, %r7;
	mov.u64 	%rd25, vindex_buffer;
	cvta.global.u64 	%rd2, %rd25;
	mov.u32 	%r14, 1;
	mov.u32 	%r15, 12;
	mov.u64 	%rd24, 0;
	// inline asm
	call (%rd1), _rt_buffer_get_64, (%rd2, %r14, %r15, %rd3, %rd24, %rd24, %rd24);
	// inline asm
	ld.s32 	%rd9, [%rd1];
	mov.u64 	%rd26, vertex_buffer;
	cvta.global.u64 	%rd8, %rd26;
	ld.s32 	%rd15, [%rd1+4];
	ld.s32 	%rd21, [%rd1+8];
	// inline asm
	call (%rd7), _rt_buffer_get_64, (%rd8, %r14, %r15, %rd9, %rd24, %rd24, %rd24);
	// inline asm
	ld.f32 	%f45, [%rd7+8];
	ld.f32 	%f46, [%rd7+4];
	ld.f32 	%f47, [%rd7];
	// inline asm
	call (%rd13), _rt_buffer_get_64, (%rd8, %r14, %r15, %rd15, %rd24, %rd24, %rd24);
	// inline asm
	ld.f32 	%f48, [%rd13+8];
	ld.f32 	%f49, [%rd13+4];
	ld.f32 	%f50, [%rd13];
	// inline asm
	call (%rd19), _rt_buffer_get_64, (%rd8, %r14, %r15, %rd21, %rd24, %rd24, %rd24);
	// inline asm
	sub.f32 	%f1, %f50, %f47;
	sub.f32 	%f2, %f49, %f46;
	sub.f32 	%f3, %f48, %f45;
	ld.f32 	%f51, [%rd19+8];
	ld.f32 	%f52, [%rd19+4];
	ld.f32 	%f53, [%rd19];
	sub.f32 	%f4, %f47, %f53;
	sub.f32 	%f5, %f46, %f52;
	sub.f32 	%f6, %f45, %f51;
	mul.f32 	%f54, %f2, %f6;
	mul.f32 	%f55, %f3, %f5;
	sub.f32 	%f142, %f54, %f55;
	mul.f32 	%f56, %f3, %f4;
	mul.f32 	%f57, %f1, %f6;
	sub.f32 	%f143, %f56, %f57;
	mul.f32 	%f58, %f1, %f5;
	mul.f32 	%f59, %f2, %f4;
	sub.f32 	%f144, %f58, %f59;
	ld.global.f32 	%f10, [ray+12];
	ld.global.f32 	%f11, [ray+16];
	mul.f32 	%f60, %f11, %f143;
	fma.rn.f32 	%f61, %f10, %f142, %f60;
	ld.global.f32 	%f12, [ray+20];
	fma.rn.f32 	%f13, %f12, %f144, %f61;
	rcp.rn.f32 	%f14, %f13;
	ld.global.f32 	%f62, [ray];
	sub.f32 	%f15, %f47, %f62;
	ld.global.f32 	%f63, [ray+4];
	sub.f32 	%f16, %f46, %f63;
	ld.global.f32 	%f64, [ray+8];
	sub.f32 	%f17, %f45, %f64;
	mul.f32 	%f65, %f143, %f16;
	fma.rn.f32 	%f66, %f142, %f15, %f65;
	fma.rn.f32 	%f67, %f144, %f17, %f66;
	mul.f32 	%f18, %f14, %f67;
	ld.global.f32 	%f68, [ray+32];
	setp.lt.f32	%p4, %f18, %f68;
	ld.global.f32 	%f69, [ray+28];
	setp.gt.f32	%p5, %f18, %f69;
	and.pred  	%p6, %p4, %p5;
	mov.pred 	%p26, 0;
	mov.f32 	%f146, 0f00000000;
	mov.f32 	%f145, %f146;
	@!%p6 bra 	BB0_3;
	bra.uni 	BB0_1;

BB0_1:
	mul.f32 	%f71, %f16, %f12;
	mul.f32 	%f72, %f17, %f11;
	sub.f32 	%f19, %f71, %f72;
	mul.f32 	%f73, %f15, %f12;
	mul.f32 	%f74, %f17, %f10;
	sub.f32 	%f20, %f74, %f73;
	mul.f32 	%f75, %f16, %f10;
	mul.f32 	%f76, %f15, %f11;
	sub.f32 	%f21, %f76, %f75;
	mul.f32 	%f77, %f5, %f20;
	fma.rn.f32 	%f78, %f4, %f19, %f77;
	fma.rn.f32 	%f22, %f6, %f21, %f78;
	mul.f32 	%f145, %f14, %f22;
	setp.ltu.f32	%p8, %f145, 0f00000000;
	@%p8 bra 	BB0_3;

	mul.f32 	%f79, %f2, %f20;
	fma.rn.f32 	%f80, %f1, %f19, %f79;
	fma.rn.f32 	%f81, %f3, %f21, %f80;
	mul.f32 	%f146, %f14, %f81;
	neg.f32 	%f142, %f142;
	neg.f32 	%f143, %f143;
	neg.f32 	%f144, %f144;
	add.f32 	%f82, %f22, %f81;
	mul.f32 	%f83, %f13, %f82;
	setp.ge.f32	%p9, %f146, 0f00000000;
	mul.f32 	%f84, %f13, %f13;
	setp.le.f32	%p10, %f83, %f84;
	and.pred  	%p26, %p10, %p9;

BB0_3:
	@!%p26 bra 	BB0_12;
	bra.uni 	BB0_4;

BB0_4:
	// inline asm
	call (%r16), _rt_potential_intersection, (%f18);
	// inline asm
	setp.eq.s32	%p11, %r16, 0;
	@%p11 bra 	BB0_12;

	mov.u64 	%rd38, nindex_buffer;
	cvta.global.u64 	%rd28, %rd38;
	// inline asm
	call (%rd27), _rt_buffer_get_64, (%rd28, %r14, %r15, %rd3, %rd24, %rd24, %rd24);
	// inline asm
	ld.u32 	%r3, [%rd27+8];
	ld.u32 	%r2, [%rd27+4];
	ld.u32 	%r1, [%rd27];
	mov.u64 	%rd39, normal_buffer;
	cvta.global.u64 	%rd37, %rd39;
	// inline asm
	call (%rd33, %rd34, %rd35, %rd36), _rt_buffer_get_size_64, (%rd37, %r14, %r15);
	// inline asm
	cvt.u32.u64	%r21, %rd33;
	setp.eq.s32	%p12, %r21, 0;
	setp.lt.s32	%p13, %r1, 0;
	or.pred  	%p14, %p12, %p13;
	setp.lt.s32	%p15, %r2, 0;
	or.pred  	%p16, %p14, %p15;
	setp.lt.s32	%p17, %r3, 0;
	or.pred  	%p18, %p16, %p17;
	mul.f32 	%f86, %f143, %f143;
	fma.rn.f32 	%f87, %f142, %f142, %f86;
	fma.rn.f32 	%f88, %f144, %f144, %f87;
	sqrt.rn.f32 	%f33, %f88;
	@%p18 bra 	BB0_7;
	bra.uni 	BB0_6;

BB0_7:
	rcp.rn.f32 	%f115, %f33;
	mul.f32 	%f147, %f142, %f115;
	mul.f32 	%f148, %f143, %f115;
	mul.f32 	%f149, %f144, %f115;
	bra.uni 	BB0_8;

BB0_6:
	cvt.s64.s32	%rd42, %r1;
	// inline asm
	call (%rd40), _rt_buffer_get_64, (%rd37, %r14, %r15, %rd42, %rd24, %rd24, %rd24);
	// inline asm
	ld.f32 	%f89, [%rd40+8];
	ld.f32 	%f90, [%rd40+4];
	ld.f32 	%f91, [%rd40];
	cvt.s64.s32	%rd48, %r2;
	// inline asm
	call (%rd46), _rt_buffer_get_64, (%rd37, %r14, %r15, %rd48, %rd24, %rd24, %rd24);
	// inline asm
	ld.f32 	%f92, [%rd46+8];
	ld.f32 	%f93, [%rd46+4];
	ld.f32 	%f94, [%rd46];
	cvt.s64.s32	%rd54, %r3;
	// inline asm
	call (%rd52), _rt_buffer_get_64, (%rd37, %r14, %r15, %rd54, %rd24, %rd24, %rd24);
	// inline asm
	ld.f32 	%f95, [%rd52+8];
	ld.f32 	%f96, [%rd52+4];
	ld.f32 	%f97, [%rd52];
	mul.f32 	%f98, %f146, %f97;
	mul.f32 	%f99, %f146, %f96;
	mul.f32 	%f100, %f146, %f95;
	fma.rn.f32 	%f101, %f145, %f94, %f98;
	fma.rn.f32 	%f102, %f145, %f93, %f99;
	fma.rn.f32 	%f103, %f145, %f92, %f100;
	mov.f32 	%f104, 0f3F800000;
	sub.f32 	%f105, %f104, %f145;
	sub.f32 	%f106, %f105, %f146;
	fma.rn.f32 	%f107, %f106, %f91, %f101;
	fma.rn.f32 	%f108, %f106, %f90, %f102;
	fma.rn.f32 	%f109, %f106, %f89, %f103;
	mul.f32 	%f110, %f108, %f108;
	fma.rn.f32 	%f111, %f107, %f107, %f110;
	fma.rn.f32 	%f112, %f109, %f109, %f111;
	sqrt.rn.f32 	%f113, %f112;
	rcp.rn.f32 	%f114, %f113;
	mul.f32 	%f147, %f114, %f107;
	mul.f32 	%f148, %f114, %f108;
	mul.f32 	%f149, %f114, %f109;

BB0_8:
	st.global.v2.f32 	[shading_normal], {%f147, %f148};
	st.global.f32 	[shading_normal+8], %f149;
	rcp.rn.f32 	%f116, %f33;
	mul.f32 	%f117, %f144, %f116;
	mul.f32 	%f118, %f143, %f116;
	mul.f32 	%f119, %f142, %f116;
	st.global.v2.f32 	[geometric_normal], {%f119, %f118};
	st.global.f32 	[geometric_normal+8], %f117;
	mov.u64 	%rd70, tindex_buffer;
	cvta.global.u64 	%rd60, %rd70;
	// inline asm
	call (%rd59), _rt_buffer_get_64, (%rd60, %r14, %r15, %rd3, %rd24, %rd24, %rd24);
	// inline asm
	ld.u32 	%r6, [%rd59+8];
	ld.u32 	%r5, [%rd59+4];
	ld.u32 	%r4, [%rd59];
	mov.u64 	%rd71, texcoord_buffer;
	cvta.global.u64 	%rd69, %rd71;
	mov.u32 	%r31, 8;
	// inline asm
	call (%rd65, %rd66, %rd67, %rd68), _rt_buffer_get_size_64, (%rd69, %r14, %r31);
	// inline asm
	cvt.u32.u64	%r32, %rd65;
	setp.eq.s32	%p19, %r32, 0;
	setp.lt.s32	%p20, %r4, 0;
	or.pred  	%p21, %p19, %p20;
	setp.lt.s32	%p22, %r5, 0;
	or.pred  	%p23, %p21, %p22;
	setp.lt.s32	%p24, %r6, 0;
	or.pred  	%p25, %p23, %p24;
	@%p25 bra 	BB0_10;
	bra.uni 	BB0_9;

BB0_10:
	mov.u32 	%r40, 0;
	st.global.u32 	[texcoord+8], %r40;
	mov.f32 	%f141, 0f00000000;
	st.global.v2.f32 	[texcoord], {%f141, %f141};
	bra.uni 	BB0_11;

BB0_9:
	cvt.s64.s32	%rd74, %r4;
	// inline asm
	call (%rd72), _rt_buffer_get_64, (%rd69, %r14, %r31, %rd74, %rd24, %rd24, %rd24);
	// inline asm
	ld.v2.f32 	{%f120, %f121}, [%rd72];
	cvt.s64.s32	%rd80, %r5;
	// inline asm
	call (%rd78), _rt_buffer_get_64, (%rd69, %r14, %r31, %rd80, %rd24, %rd24, %rd24);
	// inline asm
	ld.v2.f32 	{%f124, %f125}, [%rd78];
	cvt.s64.s32	%rd86, %r6;
	// inline asm
	call (%rd84), _rt_buffer_get_64, (%rd69, %r14, %r31, %rd86, %rd24, %rd24, %rd24);
	// inline asm
	ld.v2.f32 	{%f128, %f129}, [%rd84];
	mul.f32 	%f132, %f146, %f128;
	mul.f32 	%f133, %f146, %f129;
	fma.rn.f32 	%f134, %f145, %f124, %f132;
	fma.rn.f32 	%f135, %f145, %f125, %f133;
	mov.f32 	%f136, 0f3F800000;
	sub.f32 	%f137, %f136, %f145;
	sub.f32 	%f138, %f137, %f146;
	fma.rn.f32 	%f139, %f138, %f121, %f135;
	fma.rn.f32 	%f140, %f138, %f120, %f134;
	st.global.v2.f32 	[texcoord], {%f140, %f139};
	mov.u32 	%r39, 0;
	st.global.u32 	[texcoord+8], %r39;

BB0_11:
	mov.u64 	%rd97, material_buffer;
	cvta.global.u64 	%rd92, %rd97;
	mov.u32 	%r42, 4;
	// inline asm
	call (%rd91), _rt_buffer_get_64, (%rd92, %r14, %r42, %rd3, %rd24, %rd24, %rd24);
	// inline asm
	ld.u32 	%r44, [%rd91];
	// inline asm
	call (%r43), _rt_report_intersection, (%r44);
	// inline asm

BB0_12:
	ret;
}

	// .globl	_Z11mesh_boundsiPf
.visible .entry _Z11mesh_boundsiPf(
	.param .u32 _Z11mesh_boundsiPf_param_0,
	.param .u64 _Z11mesh_boundsiPf_param_1
)
{
	.reg .pred 	%p<6>;
	.reg .f32 	%f<43>;
	.reg .b32 	%r<11>;
	.reg .b64 	%rd<30>;


	ld.param.u64 	%rd3, [_Z11mesh_boundsiPf_param_1];
	ld.param.s32 	%rd6, [_Z11mesh_boundsiPf_param_0];
	mov.u64 	%rd28, vindex_buffer;
	cvta.global.u64 	%rd5, %rd28;
	mov.u32 	%r7, 1;
	mov.u32 	%r8, 12;
	mov.u64 	%rd27, 0;
	// inline asm
	call (%rd4), _rt_buffer_get_64, (%rd5, %r7, %r8, %rd6, %rd27, %rd27, %rd27);
	// inline asm
	ld.s32 	%rd12, [%rd4];
	mov.u64 	%rd29, vertex_buffer;
	cvta.global.u64 	%rd11, %rd29;
	ld.s32 	%rd18, [%rd4+4];
	ld.s32 	%rd24, [%rd4+8];
	// inline asm
	call (%rd10), _rt_buffer_get_64, (%rd11, %r7, %r8, %rd12, %rd27, %rd27, %rd27);
	// inline asm
	ld.f32 	%f4, [%rd10+8];
	ld.f32 	%f2, [%rd10+4];
	ld.f32 	%f1, [%rd10];
	// inline asm
	call (%rd16), _rt_buffer_get_64, (%rd11, %r7, %r8, %rd18, %rd27, %rd27, %rd27);
	// inline asm
	ld.f32 	%f7, [%rd16+8];
	ld.f32 	%f6, [%rd16+4];
	ld.f32 	%f5, [%rd16];
	// inline asm
	call (%rd22), _rt_buffer_get_64, (%rd11, %r7, %r8, %rd24, %rd27, %rd27, %rd27);
	// inline asm
	sub.f32 	%f12, %f5, %f1;
	sub.f32 	%f13, %f6, %f2;
	sub.f32 	%f14, %f7, %f4;
	ld.f32 	%f10, [%rd22+8];
	ld.f32 	%f9, [%rd22+4];
	ld.f32 	%f8, [%rd22];
	sub.f32 	%f15, %f8, %f1;
	sub.f32 	%f16, %f9, %f2;
	sub.f32 	%f17, %f10, %f4;
	mul.f32 	%f18, %f13, %f17;
	mul.f32 	%f19, %f14, %f16;
	sub.f32 	%f20, %f18, %f19;
	mul.f32 	%f21, %f14, %f15;
	mul.f32 	%f22, %f12, %f17;
	sub.f32 	%f23, %f21, %f22;
	mul.f32 	%f24, %f12, %f16;
	mul.f32 	%f25, %f13, %f15;
	sub.f32 	%f26, %f24, %f25;
	mul.f32 	%f27, %f23, %f23;
	fma.rn.f32 	%f28, %f20, %f20, %f27;
	fma.rn.f32 	%f29, %f26, %f26, %f28;
	sqrt.rn.f32 	%f11, %f29;
	mov.pred 	%p5, 0;
	setp.leu.f32	%p4, %f11, 0f00000000;
	@%p4 bra 	BB1_2;

	abs.f32 	%f30, %f11;
	setp.neu.f32	%p5, %f30, 0f7F800000;

BB1_2:
	cvta.to.global.u64 	%rd2, %rd3;
	@%p5 bra 	BB1_4;
	bra.uni 	BB1_3;

BB1_4:
	min.f32 	%f31, %f1, %f5;
	min.f32 	%f32, %f2, %f6;
	min.f32 	%f33, %f31, %f8;
	min.f32 	%f34, %f32, %f9;
	min.f32 	%f35, %f4, %f7;
	min.f32 	%f36, %f35, %f10;
	st.global.f32 	[%rd2], %f33;
	st.global.f32 	[%rd2+4], %f34;
	st.global.f32 	[%rd2+8], %f36;
	max.f32 	%f37, %f1, %f5;
	max.f32 	%f38, %f2, %f6;
	max.f32 	%f39, %f37, %f8;
	max.f32 	%f40, %f38, %f9;
	max.f32 	%f41, %f4, %f7;
	max.f32 	%f42, %f41, %f10;
	st.global.f32 	[%rd2+12], %f39;
	st.global.f32 	[%rd2+16], %f40;
	st.global.f32 	[%rd2+20], %f42;
	bra.uni 	BB1_5;

BB1_3:
	mov.u32 	%r9, 2096152002;
	st.global.u32 	[%rd2+8], %r9;
	st.global.u32 	[%rd2+4], %r9;
	st.global.u32 	[%rd2], %r9;
	mov.u32 	%r10, -51331646;
	st.global.u32 	[%rd2+20], %r10;
	st.global.u32 	[%rd2+16], %r10;
	st.global.u32 	[%rd2+12], %r10;

BB1_5:
	ret;
}


